#!/bin/bash

set -a
[[ -e "$(dirname $0)/.env" ]] && {
	source .env
	# set +a
}
GUM_INPUT_HEADER_MARGIN="0 0 0 2"
GUM_INPUT_CURSOR_MARGIN="0 0 0 1"
GUM_INPUT_PROMPT_MARGIN="0 2 0 2"
GUM_CONFIRM_PROMPT_MARGIN="0 2"
GUM_FORMAT_THEME="$PWD/glamour.theme.json"

reply=""

# logo_box () {
#   gum style --width="36" $(print -n -P -f '%b Local Capture Preview %b' "$(gum style --background='#ffffff' --foreground='#010101' '(fx) hash')" "$(gum style --background='#ffffff' --foreground='#010101' 'by DevHegemony')")
# }
#
get_color_field() {
	out=()
	for type in "$@"; do
		case "${type}" in
		DELAY) color=7 ;;
		FN_TRIGGER) color=9 ;;
		VIEWPORT) color=12 ;;
		CANVAS) color=11 ;;
		GRASS) color=10 ;;
		ICE) color=14 ;;
		FX_PREVIEW_URL) color=1 ;;
		FX_PREVIEW_MODE) color=5 ;;
		FX_PREVIEW_TRIGGER) color=11 ;;
		FX_PREVIEW_DELAY) color=6 ;;
		FX_PREVIEW_RESX) color=13 ;;
		FX_PREVIEW_RESY) color=2 ;;
		FX_PREVIEW_SELECTOR) color=3 ;;
		FX_PREVIEW_OUTPUT) color=4 ;;
		DRAGON) color=4 ;;
		DARK) color=3 ;;
		STEEL) color=8 ;;
		FAIRY) color=13 ;;
		esac

		key=$(gum style --align="right" --padding="0 2 0 0" --width="32" --foreground=0 --foreground=${color} "${type}")
		rawval=$(echo ${!type})
		dots=$([[ ${#rawval} -gt 30 ]] && echo "...")
		val=$(gum style --foreground=8 --align="left" --width="32" "${rawval:0:29}${dots}")
		gum join --horizontal "${key}" "${val}"
		# echo ${info}
		# out=(${out[@]} $(echo -n " [7;38;5;${color}m ${type} [0m"  ))
		# out=(${out[@]} "${info}")
		# types=(${types[@]}" [7;38;5;${color}m ${type} [0m $(gum style --faint "${!type}")\n" )
	done
	# echo -e -n ${out[@]}
	# gum join --vertical --align left "${out[@]}"
}

all_fields() {
	all_fields=(FX_PREVIEW_URL FX_PREVIEW_MODE FX_PREVIEW_TRIGGER FX_PREVIEW_DELAY FX_PREVIEW_RESX FX_PREVIEW_RESY FX_PREVIEW_SELECTOR FX_PREVIEW_OUTPUT)
	echo "${all_fields[@]}"
}

done_fields=()

did_field() {
	fld=$1
	done_fields=(${done_fields[@]} $fld)
	[[ ${2:-0} -eq 1 ]] || print_header
	# print_header
}
print_name() {
	devColor="11"
	hegColor="#4b6a91"
	dev_color_text() {
		gum style --background "${devColor}" --foreground "#010101" ' Dev '
	}
	conn_color_text() {
		gum style --background "${devColor}" --foreground "${hegColor}" 'ðŸ¬°' #ðŸ¬ ' #''ðŸ¬°'
	}
	heg_color_text() {
		gum style --background "${hegColor}" --foreground "#010101" ' Hegemony '
	}
	data_species="ballz"
	name=$(echo "CAPTURE TEST")
	dct=$(dev_color_text)
	cct=$(conn_color_text)
	hct=$(heg_color_text)
	category=$(echo "${dct}${cct}${hct}")
	echo "[1m${name} ${category}[0m"
}
print_header() {
	id=$(echo '(fx) hash')
	title="[1;7m $(printf '%s' "${id}") [0m $(print_name)"

	# echo ${title}
	tput clear
	title=$(gum style --align="center" --width 64 "${title}")
	# [[ ${#done_fields} -gt 1 ]] && opts=$(gum style --foreground="0" --background="13" --width 32 --align center --margin "0 16" --padding "0 2" "SELECTED OPTIONS")

	info=$(gum join --vertical "${title}" "${opts}")
	echo "${info}"
	# echo $(gum style --align center --width 64 ${info})
	[[ ${2:-0} -eq 1 ]] || get_color_field "${done_fields[@]}"

	# echo `echo $done_fields`
}
print_header
# title=$(print_header)

# exit

print_test() {
	no_color=$(printf '%b' "${1}" | sed -e 's/\x1B\[[0-9;]*[JKmsu]//g')

	# [ "$(printf '%s' "${no_color}" | wc --lines)" -gt $((terminal_height - prompt_height)) ] && return 1
	# [ "$(printf '%s' "${no_color}" | wc --max-line-length)" -gt "${terminal_width}" ] && return 1

	gum style --align left --width="${terminal_width}" "${1}" ''
	printf '%b' "\033[A"

	# exit 0
}
get_input() {
	val=$1
	header=${2:-}
	place=${3:-$1}
	chs=$(gum input --placeholder="${place}" --header="${header}" --prompt.foreground="13")
	if [[ "${chs}" == "" ]]; then
		chs=${place}
	fi
	echo "$chs"
}

get_num() {
	val=$1
	header=${2:-}
	place=${3:-$1}
	chs=$(gum input --placeholder="${place}" --header="${header}" --prompt.foreground="13")
	if [[ "${chs}" == "" ]]; then
		chs=${place}
	fi
	echo "$chs"
}

	terminal_size=$(stty size)
	terminal_height=${terminal_size% *}
	terminal_width=${terminal_size#* }
previewer_test() {
	# height=$(awk "BEGIN{ print $(echo "${data_pokemon}" | jq --raw-output .height) / 10 }")
	# weight=$(awk "BEGIN{ print $(echo "${data_pokemon}" | jq --raw-output .weight) / 10 }")
	height="CANVAS"
	width="VIEWPORT"

	# entries=$(gum style --align center --border normal --padding '0 1' --width 52 "$(echo "Press any key to refresh preview")")
	# jq --raw-output 'last(.flavor_text_entries | .[] | select(.language.name == "en")).flavor_text' | tr -d "\n")")

	# pokemon_path=$(echo "${data_pokemon}")
	# art=$(gum style "$(curl -fsLS \
	# "https://gitlab.com/phoneybadger/pokemon-colorscripts/-/raw/main/colorscripts/small/regular/${pokemon_path}" \
	# | sed -e 's/$/[0m/g')")
	#
	art=""

	# Display ------------------------------------------------------------------------------------------


	prompt_height=${PROMPT_HEIGHT:-1}

	# Landscape layout
	url=$(echo "${FX_PREVIEW_URL}")

	# entries=$(gum style --align center --padding '0 1' --width 52 "$(echo "")")
	format_block() {
		content=$1
		echo $(gum style --width 64 --align left "${content}")
	}
  gum style --width="64" "$(cat docs/FX_PREVIEW_URL.md | gum format)" ''
	# gum format -- "# FX Preview URL" '' "Enter the URL of the project you would like to capture. You can use a local project or any project that is web accessible." '' '## **WARNING!**' "While this testing apparatus can access any site. The live (fx) hash capture and preview invocations will not have unfettered access." "#### Examples" "- Local Development: [http://localhost:3301/](http://localhost:3301/)" "- Live: https://gateway.fxhash2.xyz/ipfs/QmThYrCv4zSmzFTtgrdqHkCvhAS5yDBCaW35YFUBM9jP9A"

	FX_PREVIEW_URL=$(get_input "${url}" "Generative Token URL" "${FX_DEFAULT_LOCAL_URL}")
	did_field FX_PREVIEW_URL

  gum style --width="64" "$(cat docs/FX_PREVIEW_MODE.md | gum format)" ''
	# gum format -- "# FX Preview Mode" '' "Choose preview mode to test VIEWPORT or CANVAS" '' "### VIEWPORT " '' "> Capture the full browsers viewport. " "### CANVAS " "> Capture the canvas HTML element only" ''
	FX_PREVIEW_MODE=$(gum confirm --affirmative="VIEWPORT" --negative="CANVAS" "Select Capture Mode For Preview" --selected.background="5" --selected.foreground="0" && echo VIEWPORT || echo CANVAS)
	did_field FX_PREVIEW_MODE

	if [[ "${FX_PREVIEW_MODE}" == "VIEWPORT" ]]; then
  gum style --width="64" "$(cat docs/FX_PREVIEW_RES.md | gum format)" ''
		# gum format -- "# VIEWPORT Resolutin" '' "Define the \`X\`x\`Y\` of the browser viewport. " '' "### VALUES " '' "> Values must be greater than \`256\` and lower than \`2048\`. " ''
		FX_PREVIEW_RESX=$(get_num "${FX_PREVIEW_RESX}" "Width" "1024")
		FX_PREVIEW_RESY=$(get_num "${FX_PREVIEW_RESY}" "Height" "1024")
		did_field FX_PREVIEW_RESX 1
		did_field FX_PREVIEW_RESY
		# statud=$(gum style --align left --width 26 "ResolutionX: [1m${FX_PREVIEW_RESX}[0m")
		# statudr=$(gum style --align right --width 26 "ResolutionY: [1m${FX_PREVIEW_RESY}[0m")
		group_info_entrie=$(gum join --horizontal "${statud}" '' "${statudr}")

	else
      gum style --width="64" "$(cat docs/FX_PREVIEW_SELECTOR.md | gum format)" ''

		# gum format -- "# FX CANVAS MODE CSS SELECTOR" '' "### CSS SELECTOR " "> Capture the canvas HTML element that is located at  CSS SELECTOR (eg. \`body > .canvas\` ) " ''
		FX_PREVIEW_SELECTOR=$(get_input "" "CSS selector for CANVAS mode capture" "canvas")
		did_field FX_PREVIEW_SELECTOR
		# info=$(gum join --vertical "${title}" '' "$(gum style --foreground="234" ${FX_PREVIEW_SELECTOR})")
	fi

	# types=$(get_color_field "$(echo "${FX_PREVIEW_MODE} ${FX_PREVIEW_TRIGGER}" | tr '[:lower:]' '[:upper:]')")
	# types=$reply
	# statud=$(gum style --align left --width 26 "ResolutionX: [1m${FX_PREVIEW_RESX}[0m")
	# statudr=$(gum style --align right --width 26 "ResolutionY: [1m${FX_PREVIEW_RESY}[0m")
	# group_info_entrie=$(gum join --horizontal "${statud}" '' "${statudr}")
	#
	# info=$(gum join --vertical "${title}" '' "${group_info_entrie}")
	# FX_PREVIEW_DELAY=$(get_input "${FX_PREVIEW_DELAY}" "Delay (s)" "10")
	# FX_PREVIEW_MODE=$(gum confirm "VIEWPORT" "CANVAS" "Select Capture Mode For Preview" --selected.background="5" --selected.foreground="120")
	# gum format -- "# FX PREVIEW TRIGGER" '' "The capturing of a preview after the URL is loaded can be done after a DELAY or by the project using an FN_TRIGGER ( \`\$fx.preview()\` ) " "### DELAY" "> Use a fixed delay of X (s)econds before triggering capture of preview. Minimum of \`1s\` and maximum of \`300s\` " '' "### FN_TRIGGER" '' "> The capture will wait until your code calls the ( \`\$fx.preview()\` ) function before capturing the preview. "
  gum style --width="64" "$(cat docs/FX_PREVIEW_TRIGGER.md | gum format)"
  FX_PREVIEW_TRIGGER=$(gum confirm --affirmative="DELAY" --negative="FXPREVIEW" "Select Capture Mode For Preview" --selected.background="5" --selected.foreground="234" && echo DELAY || echo FN_TRIGGER)
	did_field FX_PREVIEW_TRIGGER

	if [[ "${FX_PREVIEW_TRIGGER}" == "DELAY" ]]; then
		FX_PREVIEW_DELAY=$(get_num "${FX_PREVIEW_DELAY}" 'Delay (ms)' "1000")
		did_field FX_PREVIEW_DELAY
	fi

	group_info_entries=$(gum join --vertical '' "${types}" "${entries}" '')
	gum join --horizontal --align center "${title}" '  ' "${group_info_entries}"
}
run_preview() {
	gum style --width 64 --align center --foreground='3' "removing old preview.png" # || gum style --foreground='5' "no old preview.png" 2>&1
	rm "${FX_PREVIEW_OUTPUT:-output}/preview.png" >/dev/null 2>&1
	set +m
	{ node index.js "$@" &>output.log & } 2>&1
	{ gum spin --spinner meter --timeout 0 --title "Runnin, lookin for preiew.png..." sleep 999 & }
	wait %- 2>/dev/null
	kill %+
	set -m
}
previewer_test  # |	gum style --align left --width="${terminal_width}" # "${1}" ''
	printf '%b' "\033[A"
while sleep 1; do
	go=$(
		gum confirm --affirmative="RUN NOW" --negative="EXIT" "Should The Preview Run Again?" --selected.background="5" --selected.foreground="0"
		echo $?
	)
	if [[ $go -eq 0 ]]; then
		run_preview "$@" && xdg-open $(gum file $(echo ${FX_PREVIEW_OUTPUT:-output}))
	else
		tput clear
		print_header 0
		gum style --width 64 --align center "${title}"
		gum format -- "# FX PREVIEW TRIGGER" '' "The capturing of a preview after the URL is loaded can be done after a DELAY or by the project using an FN_TRIGGER ( \`\$fx.preview()\` ) " "### DELAY" "> Use a fixed delay of X (s)econds before triggering capture of preview. Minimum of \`1s\` and maximum of \`300s\` " '' "### FN_TRIGGER" '' "> The capture will wait until your code calls the ( \`\$fx.preview()\` ) function before capturing the preview. "
		exit
	fi
done
exit
